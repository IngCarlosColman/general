<template>
  <v-container fluid class="pa-4 subscription-container">
    <v-row justify="center" class="mb-8">
      <v-col cols="12" md="10">
        <!-- Tarjeta Principal con Título y Estado del Rol -->
        <v-card class="pa-6 rounded-xl elevation-10 bg-white" color="#f5f5f5">
          <v-card-title class="text-h4 font-weight-black text-center text-primary">
            Bienvenido a la Agenda Inmobiliaria!
          </v-card-title>
          <v-card-subtitle class="text-h6 text-center mb-4 text-medium-emphasis">
            Active su Licencia para comenzar a operar. Su estado actual es:
            <v-chip
              :color="getRoleColor(authStore.rol)"
              class="font-weight-bold ml-2 text-white"
              size="large"
            >
              {{ authStore.rol.toUpperCase().replace('_', ' ') }}
            </v-chip>
          </v-card-subtitle>
          <v-divider class="mb-6"></v-divider>

          <!--  SECCIÓN DE ALERTA: PENDIENTE DE REVISIÓN -->
          <v-alert
              v-if="authStore.rol === 'PENDIENTE_REVISION'"
              type="info"
              icon="mdi-clock-time-four-outline"
              title="Solicitud de Activación en Curso"
              class="mb-8"
              variant="tonal"
              color="blue-grey"
              prominent
          >
            Hemos recibido su comprobante de pago. Un administrador revisará su solicitud en las próximas 24 horas.
            Una vez aprobado, su rol cambiará a **EDITOR** y podrá acceder al sistema. Gracias por su paciencia.
          </v-alert>

          <!--  SECCIÓN PRINCIPAL: SELECCIÓN DE PLAN Y PAGO (Visible solo si el rol es PENDIENTE_PAGO) -->
          <div v-else-if="authStore.rol === 'PENDIENTE_PAGO'">
            <h2 class="text-h5 font-weight-bold text-center mb-6 text-secondary">
                1. Elija su Plan de Suscripción
            </h2>

            <v-card class="mb-6 elevation-3 rounded-xl">
              <v-tabs
                v-model="activeTab"
                align-tabs="center"
                color="primary"
                height="60"
                slider-color="secondary"
              >
                <v-tab value="agentes" prepend-icon="mdi-account-star">
                  Agentes
                  <div class="text-caption text-medium-emphasis ml-2 d-none d-sm-inline">(Individual)</div>
                </v-tab>
                <v-tab value="minibroker" prepend-icon="mdi-office-building-cog">
                  Mini Broker/Desarrolladoras
                  <div class="text-caption text-medium-emphasis ml-2 d-none d-sm-inline">(5 a 15 Cuentas)</div>
                </v-tab>
                <v-tab value="inmobiliarias" prepend-icon="mdi-domain">
                  Inmobiliarias
                  <div class="text-caption text-medium-emphasis ml-2 d-none d-sm-inline">(20+ Cuentas)</div>
                </v-tab>
              </v-tabs>
            </v-card>

            <v-window v-model="activeTab" class="py-4">
              <v-window-item value="agentes">
                <v-row justify="center" class="pa-3">
                  <v-col v-for="plan in planesAgentes" :key="plan.id" cols="12" sm="6" lg="4">
                    <PlanCard
                      :plan="plan"
                      :selected="selectedPlan === plan.id"
                      @select="selectPlan"
                      :monthlyBasePrice="350000"
                    />
                  </v-col>
                </v-row>
              </v-window-item>

              <v-window-item value="minibroker">
                <v-row justify="center" class="pa-3">
                  <v-col v-for="plan in planesMiniBroker" :key="plan.id" cols="12" sm="6" lg="4">
                    <PlanCard
                      :plan="plan"
                      :selected="selectedPlan === plan.id"
                      @select="selectPlan"
                      :monthlyBasePrice="350000"
                    />
                  </v-col>
                </v-row>
              </v-window-item>

              <v-window-item value="inmobiliarias">
                <v-row justify="center" class="pa-3">
                  <v-col v-for="plan in planesInmobiliarias" :key="plan.id" cols="12" sm="6" lg="4">
                    <PlanCard
                      :plan="plan"
                      :selected="selectedPlan === plan.id"
                      @select="selectPlan"
                      :monthlyBasePrice="350000"
                    />
                  </v-col>
                </v-row>
              </v-window-item>
            </v-window>
            <v-divider class="my-8"></v-divider>

            <!--  INFORMACIÓN DE DEPÓSITO ACTUALIZADA -->
            <v-card class="pa-5 mb-8 rounded-xl elevation-4 bg-blue-grey-lighten-5 border-lg" flat>
                <v-card-title class="text-h6 font-weight-bold text-blue-grey-darken-3 d-flex align-center">
                    <v-icon icon="mdi-bank-transfer-in" class="mr-3" color="blue-grey-darken-2"></v-icon>
                    Información para Transferencia Bancaria
                </v-card-title>
                <v-card-text class="py-3">
                    <p class="mb-2 font-weight-medium text-medium-emphasis">Realice el pago total de su plan a la siguiente cuenta:</p>
                    <v-list density="compact" class="bg-transparent">
                        <!--  LÍNEA: TIPO DE ALIAS (RUC) -->
                        <v-list-item class="px-0 py-1">
                            <span class="font-weight-medium text-caption">TIPO DE ALIAS:</span>
                            <span class="ml-2 font-weight-bold text-primary">RUC</span>
                        </v-list-item>
                        <v-list-item class="px-0 py-1">
                            <span class="font-weight-medium text-caption">ALIAS:</span>
                            <span class="ml-2 font-weight-bold text-primary">3685150 - 7</span>
                        </v-list-item>
                        <!--  LÍNEA: CUENTA N -->
                        <v-list-item class="px-0 py-1">
                            <span class="font-weight-medium text-caption">CUENTA NUMERO:</span>
                            <span class="ml-2 font-weight-bold text-primary">266422</span>
                        </v-list-item>
                        <v-list-item class="px-0 py-1">
                            <span class="font-weight-medium text-caption">DESTINATARIO:</span>
                            <span class="ml-2 font-weight-bold text-primary">Carlos Colman</span>
                        </v-list-item>
                        <!--  ENTIDAD ACTUALIZADA -->
                        <v-list-item class="px-0 py-1">
                            <span class="font-weight-medium text-caption">ENTIDAD FINANCIERA:</span>
                            <span class="ml-2 font-weight-bold text-primary">Cooperativa Universitaria Ltda.</span>
                        </v-list-item>
                    </v-list>
                    <v-alert
                        type="warning"
                        density="compact"
                        variant="tonal"
                        class="mt-4"
                    >
                        Recuerde que debe subir el comprobante de esta transferencia en el siguiente paso.
                    </v-alert>
                </v-card-text>
            </v-card>
            <!--  FIN INFORMACIÓN DE DEPÓSITO -->

            <h2 class="text-h5 font-weight-bold text-center mb-6 text-secondary">
                2. Suba su Comprobante de Pago
            </h2>

            <v-form @submit.prevent="handleUpload">
              <!-- ALERT DE PLAN SELECCIONADO -->
              <v-alert
                v-if="currentPlan"
                type="success"
                icon="mdi-check-circle"
                class="mb-6"
                variant="tonal"
                color="green-darken-2"
              >
                Plan Seleccionado: <span class="font-weight-bold">{{ currentPlan.name }}</span> ({{ currentPlan.users }} Cuentas) |
                Monto Total a Pagar: <span class="font-weight-black text-h6">{{ currentPlan.totalPriceFormatted }}</span>
              </v-alert>
              <!-- FIN ALERT -->

              <!-- AÑADIDA LA PROPIEDAD 'single' PARA ASEGURAR QUE SÓLO DEVUELVE UN OBJETO FILE -->
              <v-file-input
                v-model="comprobanteFile"
                :disabled="!selectedPlan || store.isUploading"
                :rules="fileRules"
                accept="image/jpeg,image/png,application/pdf"
                label="Seleccione Comprobante (JPG, PNG o PDF)"
                prepend-icon="mdi-paperclip"
                variant="outlined"
                clearable
                class="mb-4"
                single
              ></v-file-input>

              <div class="d-flex flex-column align-center">
                <v-btn
                  type="submit"
                  :disabled="!selectedPlan || !comprobanteFile || store.isUploading"
                  :loading="store.isUploading"
                  color="primary"
                  size="large"
                  class="mt-4 font-weight-bold"
                  block
                  prepend-icon="mdi-cloud-upload-outline"
                >
                  Subir Comprobante y Enviar Solicitud
                </v-btn>

                <v-alert
                  v-if="store.uploadError"
                  type="error"
                  class="mt-4 w-100"
                  density="compact"
                  variant="flat"
                >
                  {{ store.uploadError }}
                </v-alert>
              </div>
            </v-form>
          </div>
          <v-alert
              v-else
              type="error"
              icon="mdi-lock-alert"
              title="Acceso Denegado"
              variant="tonal"
              prominent
              class="mb-8"
          >
            Su cuenta actual es ({{ authStore.rol.toUpperCase() }}) no requiere que complete el proceso de suscripción. Contacte a soporte si cree que esto es un error.
          </v-alert>

          <!--  NUEVA ACCIÓN DE CIERRE DE SESIÓN -->
          <v-card-actions class="pt-6">
              <v-btn
                variant="elevated"
                color="red-darken-3"
                @click="handleLogout"
                block
                prepend-icon="mdi-logout"
                size="large"
              >
                Cerrar Sesión y Salir
              </v-btn>
          </v-card-actions>
          <!--  FIN ACCIÓN DE CIERRE DE SESIÓN -->

        </v-card>
      </v-col>
    </v-row>
  </v-container>
</template>

<script setup>
import { ref, computed, watch } from 'vue'; // AÑADIDO 'watch'
import { useRouter } from 'vue-router';
import { useAuthStore } from '@/stores/auth';
import { useSuscripcionStore } from '@/stores/suscripcion';

// --- Importación de Componente de Tarjeta ---
import PlanCard from '@/components/PlanCard.vue';

// --- Constantes ---
const monthlyBasePrice = 350000; // Precio base para cálculo de descuentos

// --- Stores & Router ---
const authStore = useAuthStore();
const store = useSuscripcionStore();
const router = useRouter();

// --- Estado Local ---
const selectedPlan = ref(null);
const comprobanteFile = ref(null);
const activeTab = ref('agentes');

// --- Funciones Auxiliares ---

/**
 * Determina la duración en meses basándose en el campo 'duration' del plan.
 * (Función auxiliar para calcular el precio total en el componente padre)
 * @param {object} plan - Objeto del plan.
 * @returns {number} Duración en meses.
 */
const getDurationInMonths = (plan) => {
    const durationText = plan.duration.toLowerCase();

    if (durationText.includes('1 mes')) return 1;
    if (durationText.includes('6 meses')) return 6;
    if (durationText.includes('1 año')) return 12;

    // Fallback para planes corporativos si la duración no es explícita
    if (plan.id.startsWith('mb_') || plan.id.startsWith('inm_')) {
        return 12;
    }
    return 1; // Default a 1 mes si no se puede determinar
};

/**
 * Calcula el precio total de pago único para un plan.
 * Fórmula: Precio Mensual Equivalente * Duración en Meses * Cantidad de Cuentas
 * @param {object} plan - Objeto del plan.
 * @returns {number} Precio total.
 */
const calculateTotalPrice = (plan) => {
    const pricePerMonth = plan.price;
    const months = getDurationInMonths(plan);
    const users = plan.users || 1;

    return pricePerMonth * months * users;
};


// --- Reglas de Validación ---
const fileRules = [
  v => !!v || 'El comprobante es obligatorio.',
  v => {
    // Maneja si v es File o un array de Files
    const file = Array.isArray(v) ? v[0] : v;
    return !file || file.size <= 5000000 || 'El archivo debe ser menor a 5 MB.';
  },
];

// --- Computadas de Planes (Organización de la interfaz) ---
const allPlans = computed(() => store.plans);

// Filtramos y organizamos los planes en grupos
const planesAgentes = computed(() =>
  allPlans.value.filter(p => p.id.startsWith('agente_'))
);

const planesMiniBroker = computed(() =>
  allPlans.value.filter(p => p.id.startsWith('mb_'))
);

const planesInmobiliarias = computed(() =>
  allPlans.value.filter(p => p.id.startsWith('inm_'))
);

/**
 * Obtiene el plan completo actualmente seleccionado,
 * añadiendo el precio total y el formato de moneda.
 */
const currentPlan = computed(() => {
  const plan = store.plans.find(p => p.id === selectedPlan.value);

  if (plan) {
    const totalPrice = calculateTotalPrice(plan);
    return {
      ...plan,
      totalPrice,
      totalPriceFormatted: store.formatCurrency(totalPrice),
    };
  }
  return null;
});


// --- Métodos ---

/**
 * Función para cerrar la sesión del usuario y redirigirlo al login.
 */
const handleLogout = async () => {
  try {
    await authStore.logout();
    await router.push('/login');
  } catch (error) {
    console.error('Error al cerrar sesión:', error);
  }
};

/**
 * Función para seleccionar un plan, deseleccionando si se hace clic nuevamente.
 * @param {string} planId - ID del plan seleccionado.
 */
const selectPlan = (planId) => {
    selectedPlan.value = selectedPlan.value === planId ? null : planId;
    // Limpiamos el error al cambiar de plan
    store.uploadError = null;
};

/**
 * Función que determina el color del chip basado en el rol.
 * @param {string} rol - Rol del usuario.
 * @returns {string} Color de Vuetify.
 */
const getRoleColor = (rol) => {
    switch (rol) {
        case 'administrador': return 'red-darken-3';
        case 'editor': return 'green-darken-2';
        case 'PENDIENTE_PAGO': return 'yellow-darken-3';
        case 'PENDIENTE_REVISION': return 'blue-grey-darken-2';
        default: return 'grey';
    }
};

/**
 * Maneja la subida del archivo al store.
 */
const handleUpload = async () => {
    // 1. Validar el plan seleccionado
    if (!selectedPlan.value) {
        store.uploadError = 'Debe seleccionar un plan.';
        return;
    }

    // 2. Extraer el objeto File de forma robusta
    // Ahora, con la prop 'single' añadida, deberíamos esperar un File o null.
    // Mantenemos la lógica de array por si la versión de Vuetify lo sigue devolviendo.
    const file = Array.isArray(comprobanteFile.value) && comprobanteFile.value.length > 0
        ? comprobanteFile.value[0]
        : comprobanteFile.value;

    // 3. Validar si el archivo es un objeto File válido
    if (!file || !(file instanceof File)) {
        store.uploadError = 'Debe adjuntar el comprobante de pago. Asegúrese de que el archivo no está corrupto.';
        // También limpiamos el ref por si se quedó en un estado no deseado (ej. array vacío)
        comprobanteFile.value = null; 
        return;
    }
    
    // 4. Validación extra de tamaño (Aunque ya está en fileRules, es bueno tener un check final)
    if (file.size === 0) {
        store.uploadError = 'El archivo seleccionado está vacío o no se ha cargado correctamente.';
        return;
    }


    // 5. Si pasa la validación, limpiar cualquier error anterior
    store.uploadError = null;

    // 6. Llamada a la acción del store (pasando el objeto File limpio)
    try {
        const result = await store.submitPaymentProof(selectedPlan.value, file);

        // Si la subida fue exitosa, limpiamos el campo y la selección.
        if (result && result.success) {
            comprobanteFile.value = null;
            selectedPlan.value = null;
        }
    } catch (error) {
        // El error ya viene del auth.service (ej: 'El ID del plan es obligatorio.')
        // Nos aseguramos de mostrar el mensaje de error del backend.
        store.uploadError = error.message || error;
    }
    
};


// --- WATCH (Para Debugear en Consola) ---
watch(comprobanteFile, (newValue) => {
    console.log('--- Nuevo valor de Comprobante ---');
    if (Array.isArray(newValue)) {
        console.log(`Es un Array con ${newValue.length} elementos.`);
        if (newValue.length > 0 && newValue[0] instanceof File) {
            console.log(`[OK] Archivo detectado: ${newValue[0].name} (${newValue[0].size} bytes)`);
        } else {
            console.log('[ERROR] Array vacío o elemento no es un File.');
        }
    } else if (newValue instanceof File) {
        console.log(`[OK] Es un Objeto File: ${newValue.name} (${newValue.size} bytes)`);
    } else {
        console.log(`[WARN] Valor es nulo/desconocido: ${newValue}`);
    }
    console.log('------------------------------------');
}, { deep: true });
// ------------------------------------------

</script>

<style scoped>
/* Contenedor centralizado y con padding */
.subscription-container {
    max-width: 1400px;
    margin: 20px auto;
    /* Asegura que la vista pueda desplazarse si es necesario */
    min-height: calc(100vh - 40px);
    padding-bottom: 40px !important;
}

/* Estilos de color para mantener consistencia */
.text-primary { color: #007bff !important; } /* Azul Intenso */
.text-secondary { color: #28a745 !important; } /* Verde para Acciones */
</style>