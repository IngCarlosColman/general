// src/controllers/categorias.controller.js

const { pool } = require('../db/db');

// Funci칩n auxiliar para verificar si el usuario es administrador.
// Esto centraliza el chequeo para las funciones CUD.
const checkAdminRole = (rol_usuario, res) => {
    if (rol_usuario !== 'administrador') {
        res.status(403).json({ error: 'Acceso denegado. Solo los administradores pueden modificar categor칤as.' });
        return false;
    }
    return true;
};

/**
 * Obtiene todas las categor칤as de la tabla 'categorias'.
 * (Lectura permitida para todos los roles autenticados)
 */
const getCategorias = async (req, res) => {
    try {
        const query = 'SELECT id, nombre_categoria FROM categorias ORDER BY nombre_categoria ASC;';
        const result = await pool.query(query);
        res.status(200).json(result.rows);
    } catch (err) {
        console.error('Error al obtener las categor칤as:', err);
        res.status(500).json({ error: 'Error del servidor al obtener las categor칤as' });
    }
};

/**
 * Crea una nueva categor칤a.
 * 游뚿 RESTRICCI칍N: Solo administradores.
 */
const createCategoria = async (req, res) => {
    const { rol: rol_usuario } = req.user;
    if (!checkAdminRole(rol_usuario, res)) return;

    const { nombre_categoria } = req.body;
    try {
        const query = 'INSERT INTO categorias (nombre_categoria) VALUES ($1) RETURNING *;';
        const result = await pool.query(query, [nombre_categoria]);
        res.status(201).json(result.rows[0]);
    } catch (err) {
        console.error('Error al crear la categor칤a:', err);
        if (err.code === '23505') { // C칩digo de error de unicidad
            return res.status(409).json({ error: 'Ya existe una categor칤a con ese nombre.', details: err.detail });
        }
        res.status(500).json({ error: 'Error del servidor.', details: err.detail });
    }
};

/**
 * Actualiza una categor칤a existente.
 * 游뚿 RESTRICCI칍N: Solo administradores.
 */
const updateCategoria = async (req, res) => {
    const { rol: rol_usuario } = req.user;
    if (!checkAdminRole(rol_usuario, res)) return;
    
    const { id } = req.params;
    const { nombre_categoria } = req.body;
    try {
        const query = 'UPDATE categorias SET nombre_categoria = $1 WHERE id = $2 RETURNING *;';
        const result = await pool.query(query, [nombre_categoria, id]);
        if (result.rowCount === 0) {
            return res.status(404).json({ error: 'Categor칤a no encontrada.' });
        }
        res.json(result.rows[0]);
    } catch (err) {
        console.error('Error al actualizar la categor칤a:', err);
        if (err.code === '23505') {
            return res.status(409).json({ error: 'Ya existe una categor칤a con ese nombre.', details: err.detail });
        }
        res.status(500).json({ error: 'Error del servidor.', details: err.detail });
    }
};

/**
 * Elimina una categor칤a.
 * 游뚿 RESTRICCI칍N: Solo administradores.
 */
const deleteCategoria = async (req, res) => {
    const { rol: rol_usuario } = req.user;
    if (!checkAdminRole(rol_usuario, res)) return;

    const { id } = req.params;
    try {
        const query = 'DELETE FROM categorias WHERE id = $1 RETURNING *;';
        const result = await pool.query(query, [id]);
        if (result.rowCount === 0) {
            return res.status(404).json({ error: 'Categor칤a no encontrada.' });
        }
        res.json({ message: 'Categor칤a eliminada correctamente.' });
    } catch (err) {
        console.error('Error al eliminar la categor칤a:', err);
        if (err.code === '23503') { // C칩digo de error de clave for치nea
            return res.status(409).json({ error: 'No se puede eliminar la categor칤a porque est치 asignada a uno o m치s contactos.', details: err.detail });
        }
        res.status(500).json({ error: 'Error del servidor.', details: err.detail });
    }
};

module.exports = {
    getCategorias,
    createCategoria,
    updateCategoria,
    deleteCategoria,
};